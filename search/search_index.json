{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>Hallo world!</p>"},{"location":"about/","title":"Group","text":"<p>We are a group of ...</p>"},{"location":"episodes/python-matplotlib/","title":"Matplotlib","text":"Matplotlib - create your plots  <p>Examples are based on this course material provided by HIFIS. Matplotlib bases there setup strategy as imperative.</p>"},{"location":"episodes/python-matplotlib/#getting-started","title":"Getting started","text":""},{"location":"episodes/python-matplotlib/#order-of-declaring","title":"Order of declaring","text":"<p>Matplotlib is sensitive to the order of which you declare elements.</p> <ol> <li>Data</li> <li>Decoration (labels, title)</li> <li>Plot elements from back to front (lines)</li> <li>Plot area scaling, transformations </li> </ol> <p>Alternatively use the 'zorder' for declaration purposes</p>"},{"location":"episodes/python-matplotlib/#one-plot-single-line","title":"One plot - single line","text":"<pre><code>#== IMPORTS ==#\nfrom matplotlib import pyplot\nimport numpy\n#== FUNCTIONS ==#\ndef myrange(start,stop,step):\nx0=start; dx=step; x1=stop+step\nreturn numpy.arange(x0,x1,dx)\n#== CONSTANTS ==#\n#== VARIABLES ==#\nmonths = [\n\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n]\nwater_levels_2010 = [\n5.77, 6.04, 6.52, 6.48, 6.54, 5.92,\n5.64, 5.21, 5.01, 5.18, 5.45, 5.59\n]\nytics0=4\nytics1=8\ndy=0.5\n#== ROUTINE ==#\n#-- Data to plot\npyplot.plot(months,water_levels_2010)\n#-- Configure plot parameters\npyplot.xlabel(\"Month\")\npyplot.ylabel(\"[m]\")\npyplot.title(\"Avg. water level of a river in 2022\")\n#-- Lines\nmarker_xlines = [min(water_levels_2010), max(water_levels_2010)]\npyplot.hlines(\ny=marker_xlines,\nxmin=months[0],\nxmax=months[-1],\nlinestyles=\"dotted\",\ncolors=\"lightgray\"\n)\n#-- Tics\nytics_water_level = myrange(ytics0,ytics1,dy)\npyplot.yticks(ytics_water_level)\n#-- Plotting\npyplot.show()\n</code></pre>"},{"location":"episodes/python-matplotlib/#one-plot-multi-line","title":"One plot - multi line","text":"<pre><code>#== IMPORTS ==#\nfrom matplotlib import pyplot\nimport numpy\n#== FUNCTIONS ==#\ndef myrange(start,stop,step):\nx0=start; dx=step; x1=stop+step\nreturn numpy.arange(x0,x1,dx)\n#== CONSTANTS ==#\n#== VARIABLES ==#\nmonths = [\n\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n]\nwater_levels_2010 = [\n5.77, 6.04, 6.52, 6.48, 6.54, 5.92, \n5.64, 5.21, 5.01, 5.18, 5.45, 5.59\n]\nwater_levels_2020 = [\n5.48, 5.82, 6.31, 6.26, 6.09, 5.87, \n5.72, 5.54, 5.22, 4.86, 5.12, 5.40\n]\nytics0=4\nytics1=8\ndy=0.5\n#== ROUTINE ==#\n#-- Data to plot\npyplot.plot(months,water_levels_2010, label=\"2010\")\npyplot.plot(months,water_levels_2020, label=\"2020\")\n#-- Configure plot parameters\npyplot.xlabel(\"Month\")\npyplot.ylabel(\"[m]\")\npyplot.title(\"Avg. water level of a river in 2022\")\npyplot.legend()\n#-- Lines\nmarker_xlines = [min(water_levels_2010 + water_levels_2020), max(water_levels_2010 + water_levels_2020)]\npyplot.hlines(\ny=marker_xlines,\nxmin=months[0],\nxmax=months[-1],\nlinestyles=\"dotted\",\ncolors=\"lightgray\"\n)\n#-- Tics\nytics_water_level = myrange(ytics0,ytics1,dy)\npyplot.yticks(ytics_water_level)\n#-- Plotting\npyplot.show()\n</code></pre>"},{"location":"episodes/python-matplotlib/#multi-plot-imperative","title":"Multi plot - imperative","text":"<pre><code>#== IMPORTS ==#\nfrom matplotlib import pyplot\nimport numpy\n#== FUNCTIONS ==#\ndef myrange(start,stop,step):\n\"\"\"\n    Generate a range list of start stop step intervals\n    \"\"\"\nx0=start;dx=0.5;x1=8+step\nreturn numpy.arange(x0,x1,dx)\n# Calculate the difference\ndef diffdata(data1,data0):\n\"\"\"\n    Difference fron dataset 1 to dataset 2\n    \"\"\"\ndiff = [ data1[idx] - data0[idx] for idx in range(len(data1)) ] \nreturn diff\n#== CONSTANTS ==#\n#== VARIABLES ==#\nmonths = [\n\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n]\nwater_levels_2010 = [\n5.77, 6.04, 6.52, 6.48, 6.54, 5.92, \n5.64, 5.21, 5.01, 5.18, 5.45, 5.59\n]\nwater_levels_2020 = [\n5.48, 5.82, 6.31, 6.26, 6.09, 5.87, \n5.72, 5.54, 5.22, 4.86, 5.12, 5.40\n]\nytics0=4\nytics1=8\ndy=0.5\n#== ROUTINE ==#\n#-- Overall plot structure\nfigure, axes = pyplot.subplots(nrows=2, ncols=2) # (2)\n#figure, axes = pyplot.subplots(nrows=1, ncols=2) # (2)\n#-- Plot 1\n#pyplot.sca(axes[0])\npyplot.sca(axes[0][0])\n#-- Data\npyplot.plot(months,water_levels_2010, label=\"2010\")\npyplot.plot(months,water_levels_2020, label=\"2020\")\n#-- Configure plot parameters\npyplot.title(\"Avg. water level of a river in 2010 and 2020\")\npyplot.xlabel(\"Month\")\npyplot.ylabel(\"[m]\")\npyplot.legend()\n#-- Lines\nmarker_xlines = [min(water_levels_2010 + water_levels_2020), max(water_levels_2010 + water_levels_2020)]\npyplot.hlines(\ny=marker_xlines,\nxmin=months[0],\nxmax=months[-1],\nlinestyles=\"dotted\",\ncolors=\"lightgray\"\n)\n#-- Tics\nytics_water_level = myrange(ytics0,ytics1,dy)\npyplot.yticks(ytics_water_level)\n#-- Plot 2\n#pyplot.sca(axes[0])\npyplot.sca(axes[1][1])\n#-- Data\nwater_level_differences = diffdata(water_levels_2020, water_levels_2010)\npyplot.plot(months, water_level_differences)\n#-- Configure plot parameters\npyplot.title(\"Difference between water levels\")\npyplot.xlabel(\"Month\")\npyplot.ylabel(\"[m]\")\n#-- Lines\npyplot.hlines(0, xmin=months[0], xmax=months[-1], color=\"black\")\n#--------------#\n#-- PLOTTING --#\n#.. setting padding\nfigure.tight_layout(pad=0.5)\n#pyplot.show()\n#--------------#\n</code></pre>"},{"location":"episodes/python-matplotlib/#multi-plot-object-oriented","title":"Multi plot - object oriented","text":"<pre><code>#== IMPORTS ==#\nfrom matplotlib import pyplot\nimport numpy\n#== FUNCTIONS ==#\ndef myrange(start,stop,step):\n\"\"\"\n    Generate a range list of start stop step intervals\n    \"\"\"\nx0=start;dx=0.5;x1=8+step\nreturn numpy.arange(x0,x1,dx)\n# Calculate the difference\ndef diffdata(data1,data0):\n\"\"\"\n    Difference fron dataset 1 to dataset 2\n    \"\"\"\ndiff = [ data1[idx] - data0[idx] for idx in range(len(data1)) ] \nreturn diff\n#== CONSTANTS ==#\n#== VARIABLES ==#\nmonths = [\n\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n]\nwater_levels_2010 = [\n5.77, 6.04, 6.52, 6.48, 6.54, 5.92, \n5.64, 5.21, 5.01, 5.18, 5.45, 5.59\n]\nwater_levels_2020 = [\n5.48, 5.82, 6.31, 6.26, 6.09, 5.87, \n5.72, 5.54, 5.22, 4.86, 5.12, 5.40\n]\nytics0=4\nytics1=8\ndy=0.5\n#== ROUTINE ==#\n#-- Create a figure object\nmyfigure = pyplot.figure()\n#-- Create the subplot layout (axes)\naxes = myfigure.subplots(nrows=2, ncols=2)\n#-- Alternative unfolding practices\n# https://stackoverflow.com/questions/43205928/how-does-unpacking-in-fig-ax-plt-subplots-work-for-more-than-one-subplot\n# ((plotA,b),(c,plotB)) = myfigure.subplots(nrows=2, ncols=2)\n#---------------------------------------------------------\n#-- Plot 1\n#-- Data\naxes[0][0].plot(months,water_levels_2010, label=\"2010\")\naxes[0][0].plot(months,water_levels_2020, label=\"2020\")\n#-- Configure plot parameters\naxes[0][0].set_title(\"Avg. water level of a river in 2010 and 2020\")\naxes[0][0].set_xlabel(\"Month\")\naxes[0][0].set_ylabel(\"[m]\")\naxes[0][0].legend()\n#-- Lines\nmarker_xlines = [min(water_levels_2010 + water_levels_2020), max(water_levels_2010 + water_levels_2020)]\naxes[0][0].hlines(\ny=marker_xlines,\nxmin=months[0],\nxmax=months[-1],\nlinestyles=\"dotted\",\ncolors=\"lightgray\"\n)\n#-- Tics\naxes[0][0].set_yticks(myrange(ytics0,ytics1,dy))\n#---------------------------------------------------------\n#-- Plot 2\npyplot.sca(axes[1][1])\n#-- Data\naxes[1][1].plot(months, diffdata(water_levels_2020, water_levels_2010))\n#-- Configure plot parameters\naxes[1][1].set_title(\"Water levels 2020 compared to 2010\")\naxes[1][1].set_xlabel(\"Month\")\naxes[1][1].set_ylabel(\"[m]\")\n#-- Lines\naxes[1][1].hlines(0, xmin=months[0], xmax=months[-1], color=\"black\")\n#---------------------------------------------------------\n#-- PLOTTING --#\n#.. setting padding\nmyfigure.tight_layout(pad=0.5)\nmyfigure.show()\n</code></pre>"},{"location":"episodes/python-matplotlib/#matplot-and-pandas","title":"Matplot and Pandas","text":"<pre><code>#== IMPORTS ==#\nfrom matplotlib import pyplot\nfrom pandas import Series, DataFrame\nimport numpy\n#== FUNCTIONS ==#\ndef myrange(start,stop,step):\n\"\"\"\n    Generate a range list of start stop step intervals\n    \"\"\"\nx0=start;dx=0.5;x1=8+step\nreturn numpy.arange(x0,x1,dx)\n# Calculate the difference\ndef diffdata(data1,data0):\n\"\"\"\n    Difference fron dataset 1 to dataset 2\n    \"\"\"\ndiff = [ data1[idx] - data0[idx] for idx in range(len(data1)) ] \nreturn diff\n#== CONSTANTS ==#\n#== VARIABLES ==#\nxname = 'Months'\nmonths = { xname:\n[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n}\nwater_levels = { \n\"2010\": [5.77, 6.04, 6.52, 6.48, 6.54, 5.92, \n5.64, 5.21, 5.01, 5.18, 5.45, 5.59],\n\"2020\": [5.48, 5.82, 6.31, 6.26, 6.09, 5.87, \n5.72, 5.54, 5.22, 4.86, 5.12, 5.40]\n}\ncollection = water_levels | months\nytics0=4\nytics1=8\ndy=0.5\n#== ROUTINE ==#\n#-- Create pandas series\n#df = DataFrame(\n#    data={\n#        'Months': months,\n#        \"Level 2020\": water_levels_2020,\n#        \"Level 2010\": water_levels_2010,\n#    }\n#).set_index('Months')\ndf = DataFrame(\ndata=collection\n).set_index(xname)\n#df = DataFrame(\n#    data={\n#        \"2020\": water_levels_2020,\n#        \"2010\": water_levels_2010,\n#    },\n#    index = months\n#)\n#-- Create a figure object\nmyfigure = pyplot.figure()\n#-- Create the subplot layout (axes)\naxes = myfigure.subplots(nrows=2, ncols=2)\n#---------------------------------------------------------\n#-- Plot 1\n#-- Data\naxes[0][0].plot(df, label=df.keys())\n#-- Configure plot parameters\naxes[0][0].set_title(\"Avg. water level of a river in 2010 and 2020\")\naxes[0][0].set_xlabel(\"Month\")\naxes[0][0].set_ylabel(\"[m]\")\naxes[0][0].legend()\n#-- Lines\nmarker_xlines = [\nmin(df[\"2020\"].append(df[\"2010\"])),\nmax(df[\"2020\"].append(df[\"2010\"]))\n]\naxes[0][0].hlines(\ny=marker_xlines,\nxmin=df.index.values[0],\nxmax=df.index.values[-1],\nlinestyles=\"dotted\",\ncolors=\"lightgray\"\n)\n#-- Tics\naxes[0][0].set_yticks(myrange(ytics0,ytics1,dy))\n#---------------------------------------------------------\n#-- Plot 2\npyplot.sca(axes[1][1])\n#-- Data\naxes[1][1].plot(df.index.values, diffdata(df[\"2020\"], df[\"2010\"]))\n#-- Configure plot parameters\naxes[1][1].set_title(\"Water levels 2020 compared to 2010\")\naxes[1][1].set_xlabel(\"Month\")\naxes[1][1].set_ylabel(\"[m]\")\n#-- Lines\naxes[1][1].hlines(0, xmin=df.index.values[0], xmax=df.index.values[-1], color=\"black\")\n#---------------------------------------------------------\n#-- PLOTTING --#\n#.. setting padding\nmyfigure.tight_layout(pad=0.5)\n#.. create the plot\nmyfigure.show()\n</code></pre>"},{"location":"episodes/python-pandas/","title":"Pandas","text":""},{"location":"episodes/python-pandas/#example","title":"Example","text":"<pre><code>#== IMPORTS ==#\nimport pandas\nimport math\n#== FUNCTIONS ==#\ndef header(lookup: str, data: dict):\noutput = {}\nfor key, value in data.items():\nif lookup in key:\noutput[key] = value\nreturn output\n#== VARIABLES ==#\n#HEADER_FILE = input(\"Header file: \")\n#DATA_FILE = input(\"Data file: \")\n#-- Task 2.1\nHEADER_FILE = \"header.txt\"\nDATA_FILE = \"data.gz\"\n#== ROUTINE ==#\n#-- Task 2.2\n#.. (A) initiatialization pandas DataFrame --#\ndf = pandas.read_csv(\nDATA_FILE,\nsep=\"\\s+\",\nheader=None,\nparse_dates=[[0, 1, 2, 3]]\n)\n#.. (B) reading header list --#\nheader_list = []\nwith open(HEADER_FILE,\"r\") as file:\nfor line in file.readlines():\nline_list = [str(x).rstrip().lstrip() for x in line.split(',')]\nheader_list.append(line_list)\n#.. (B) Error handling, missing, make sure the lists are identical in length\n#.. (B) creating an dict out of those lists\nheader_dict = {header_list[0][i]: header_list[1][i] for i in range(len(header_list[0]))}\nLABEL_DATE     = list(header(\"Date\",header_dict).keys())[0]\nLABEL_TEMP     = list(header(\"Temp\",header_dict).keys())[0]\nLABEL_DEW      = list(header(\"Dew\",header_dict).keys())[0]\nLABEL_PRESSURE = list(header(\"Pres\",header_dict).keys())[0] \nLABEL_WIND     = list(header(\"Speed\",header_dict).keys())[0] \nLABEL_RAIN_1H  = list(header(\"1h\",header_dict).keys())[0] \nLABEL_RAIN_6H  = list(header(\"6h\",header_dict).keys())[0] \n#.. (C) set DataFrame header\ndf.columns = list(header_dict.keys())\n#-- Task 2.3\n#.. set DataFrame index\ndf.set_index(LABEL_DATE,inplace=True)\n#-- Task 3.1 \n#.. replacing -9999 to be math.nan\ndf.replace(\n{\n-9999:math.nan\n},\ninplace=True\n)\n#-- Task 3.2, 3.3\n#.. (A) replace wind direction\ndf[LABEL_WIND].replace(\n{\n0:math.nan,\n360:0\n},\ninplace=True\n)\n#.. (B) replace negative rain with zero\nfor val in df[df[LABEL_RAIN_1H] &lt; 0.0].index:\ndf.loc[val,LABEL_RAIN_1H] = 0.0\nfor val in df[df[LABEL_RAIN_6H] &lt; 0.0].index:\ndf.loc[val,LABEL_RAIN_6H] = 0.0\n#.. check NaN statistics\nprint(f'Any values in {LABEL_RAIN_6H} are NaN: {df[LABEL_RAIN_6H].isna().values.any()}')\nprint(f'So many values of {LABEL_RAIN_6H} are NaN: {df[LABEL_RAIN_6H].isna().sum()}')\nprint('----------------------------')\nprint('Which column has NaN values:')\nprint(f'{df.isna().any()}')\nprint('---------------------------------------')\nprint('How many values in each column are NaN:')\nprint(f'{df.isna().sum()}')\nprint('---------------------------------------')\n#-- Task 3.4\n#.. drop all lines with no data\ndf.dropna(\nhow=\"all\", \naxis=\"columns\",  # or axis=1\ninplace=True\n)\n#-- Task 3.5\n#.. (A) Devided by a factor of 10\nprint(df)\nfor name in header_dict:\nif (\"Date\" not in name) and (\"Condition\" not in name) and (\"Direction\" not in name):\ndf[name] /= 10\n#.. (B) Update pressure particular =&gt; Pressure in Pa\ndf[LABEL_PRESSURE] = df[LABEL_PRESSURE] * 100\nprint(df)\n#-- Task 3.6 and 3.7\n#.. (A) generating a list of all timestamps in a year\ntimestamp_start = \"2020-01-01 00:00\"\ntimestamp_end   = \"2020-12-31 23:00\"\nexpected_timestamps = pandas.date_range(\nstart=timestamp_start, \nend=timestamp_end, freq=\"H\"\n)\n#.. (B) identify missing data and treat missing data\nfor timestamp in expected_timestamps:\n#.. (df.index == timestamp).any() , if any value is true the whole expression is True\nif not (df.index == timestamp).any():\n#.. generates a empty Series with the current timestamp as an index\nnew_row = pandas.Series(name=timestamp) \n#.. add data to the DataFrame, missing data will be filled with NaN\ndf = df.append(new_row)\nprint('Missing timestamp:',timestamp)\n#-- Task 2.4,5,6,7,8\n#-- statistics\nprint(\"------------------------\")\nprint(\"-- Overall Statistics --\")\nprint(df.describe())\nprint(\"------------------------\")\n#-- Tasks 4.1 and 4.2\n#.. Min/Max/Mean values\nprint('--------------')\nfor topic in [LABEL_TEMP, LABEL_DEW, LABEL_WIND, LABEL_RAIN_1H, LABEL_RAIN_6H]:\nprint(f'Statistics on {topic} in {header_dict[topic]}')\nprint(f'Min: {df[topic].min():.1f}')\nprint(f'Max: {df[topic].max():.1f}')\nprint(f'Mean: {df[topic].mean():.2f}')\nprint('--------------')\n#-- Task 4.3\n#.. total values for precipitation\nfor topic in [LABEL_RAIN_1H, LABEL_RAIN_6H]:\nprint(f\"Total precipitation measured: {df[topic].sum()} {header_dict[topic]}\")\nprint('--------------')\n#== Task 5\n#-- Task 5.1 Temperature Difference Data\ndiff_temp = df.diff()[LABEL_TEMP] \n#-- Task 5.2 dT_max and dT_min\nprint(\nf\"Largest temperature rise\",\nf\"is on {diff_temp.idxmax()}\",\nf\"with {diff_temp.max():.2f} in K\",\nf\"within an hour\"\n)\nprint(\nf\"Largest temperature drop\",\nf\"is on {diff_temp.idxmin()}\",\nf\"with {diff_temp.min():.2f} in K\",\nf\"within an hour\"\n)\n#-- Task 5.3\n#.. create data for the NaN values\n#-- Task 5.4 \n#.. a nice day\n#.. T &gt; 10\u00b0C, Wind &lt; 4m/s, Rain == 0\nnice_days = df[(df[LABEL_RAIN_1H] == 0.0) &amp; (df[LABEL_TEMP] &gt; 10) &amp; (df[LABEL_WIND] &lt; 4.0)]\nprint(nice_days)\n</code></pre>"}]}